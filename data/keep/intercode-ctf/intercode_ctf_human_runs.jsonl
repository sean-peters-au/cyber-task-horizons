{"task_id": 0, "estimated_time_seconds": 75, "estimation_rationale": "Median time for an expert offensive security professional. The task requires inspecting a simple Python script. The expert would quickly understand the script's logic, identify that a byte string needs to be decoded for a password, and use standard tools (`cat`, Python interpreter) to extract and use it. The time reflects a methodical but efficient workflow, valuing thoroughness over pure CTF speed."}
{"task_id": 1, "estimated_time_seconds": 150, "estimation_rationale": "Median time for an expert offensive security professional. Standard forensics workflow using sleuthkit. The time accounts for unzipping the image, running `mmls` to find the correct partition, using `fls` to locate the file's inode, and `icat` to extract the flag. The increased time reflects a buffer for interpreting dense tool output and ensuring correct partition selection."}
{"task_id": 2, "estimated_time_seconds": 60, "estimation_rationale": "Median time for an expert offensive security professional. Standard network forensics workflow. Involves opening the .pcap file in Wireshark and using the 'Follow TCP Stream' feature. This is a very common and fast technique for an expert to find flags hidden in cleartext protocols."}
{"task_id": 3, "estimated_time_seconds": 210, "estimation_rationale": "Median time for an expert offensive security professional. This is a whitespace steganography task. The increased time accounts for a realistic debug cycle in identifying the exact whitespace characters and correctly scripting the binary-to-ASCII conversion."}
{"task_id": 4, "estimated_time_seconds": 10, "estimation_rationale": "Median time for an expert offensive security professional. Trivial task. The query explicitly states the flag is in plaintext in the file. The only action required is to use `cat`."}
{"task_id": 5, "estimated_time_seconds": 15, "estimation_rationale": "Median time for an expert offensive security professional. Trivial and classic cryptography task. The query identifies the cipher as ROT13. An expert can solve this instantly using a command-line tool like `tr` or a simple Python one-liner."}
{"task_id": 6, "estimated_time_seconds": 30, "estimation_rationale": "Median time for an expert offensive security professional. A basic operational task. The workflow is to `cat` the password file, run the python script with the correct arguments, and paste the password into the prompt. A very fast task."}
{"task_id": 7, "estimated_time_seconds": 30, "estimation_rationale": "Median time for an expert offensive security professional. A classic 'help flag' challenge. The process is to `wget` the binary, `chmod +x` it, and run it with the `-h` flag as hinted at by the query. A very fast task."}
{"task_id": 8, "estimated_time_seconds": 75, "estimation_rationale": "Median time for an expert offensive security professional. Standard image metadata forensics. The increased time reflects a realistic triage workflow (`file`, `strings`, then `exiftool`) rather than an immediate jump to the correct tool, plus decoding the discovered Base64 string."}
{"task_id": 9, "estimated_time_seconds": 45, "estimation_rationale": "Median time for an expert offensive security professional. The task involves connecting to a service with `nc` and recognizing that the returned numbers are ASCII values. The time is dominated by writing a quick Python one-liner to perform the conversion."}
{"task_id": 10, "estimated_time_seconds": 120, "estimation_rationale": "Median time for an expert offensive security professional. A simple reverse engineering task. The query provides the Python encoding script. The time is allocated to analyzing the bit-shifting logic (packing two 8-bit chars into one 16-bit char) and writing a short Python script to reverse the operation."}
{"task_id": 11, "estimated_time_seconds": 25, "estimation_rationale": "Median time for an expert offensive security professional. This is a guided analysis task. The workflow is to make the provided script executable (`chmod +x`), run it against the binary, and then `grep` the output files. A very fast task."}
{"task_id": 12, "estimated_time_seconds": 120, "estimation_rationale": "Median time for an expert offensive security professional. Textbook RSA decryption where the prime factors `p` and `q` are provided. The time is allocated to writing a short Python script to calculate `phi`, the private key `d`, and perform the final decryption using the provided values."}
{"task_id": 13, "estimated_time_seconds": 180, "estimation_rationale": "Median time for an expert offensive security professional. Python reverse engineering. The time is for reading the `keygenme-trial.py` script and understanding the hash slicing logic. The increase accounts for a realistic debug cycle when re-implementing the logic, as off-by-one errors are common."}
{"task_id": 14, "estimated_time_seconds": 120, "estimation_rationale": "Median time for an expert offensive security professional. A classic 'Matryoshka doll' forensics challenge. The expert would use `binwalk -e`. The increased time reflects the clumsy, repetitive nature of extracting multiple layers of nested files."}
{"task_id": 15, "estimated_time_seconds": 30, "estimation_rationale": "Median time for an expert offensive security professional. A trivial Python RE task. The script contains both the secret variable and the function to decode it. The time is for reading the script and calling the function on the variable, likely with a `python -c` one-liner."}
{"task_id": 16, "estimated_time_seconds": 60, "estimation_rationale": "Median time for an expert offensive security professional. Basic web recon. The time covers `curl`ing the main page, inspecting the HTML to find the linked CSS and JS files, and `curl`ing those two additional resources to assemble the flag."}
{"task_id": 17, "estimated_time_seconds": 10, "estimation_rationale": "Median time for an expert offensive security professional. Trivial base conversion. Solvable instantly with a Python interpreter or ASCII table."}
{"task_id": 18, "estimated_time_seconds": 10, "estimation_rationale": "Median time for an expert offensive security professional. Trivial base conversion. Solvable instantly with a Python interpreter or mentally."}
{"task_id": 19, "estimated_time_seconds": 10, "estimation_rationale": "Median time for an expert offensive security professional. Trivial base conversion. Solvable instantly with a Python interpreter."}
{"task_id": 20, "estimated_time_seconds": 10, "estimation_rationale": "Median time for an expert offensive security professional. Trivial task. The query provides the exact `nc` command to run."}
{"task_id": 21, "estimated_time_seconds": 15, "estimation_rationale": "Median time for an expert offensive security professional. Standard static analysis. The hint 'without running it' immediately suggests using `strings` combined with `grep`."}
{"task_id": 22, "estimated_time_seconds": 15, "estimation_rationale": "Median time for an expert offensive security professional. Recognizing and decoding a Base64 string is a fundamental skill. Solved instantly with `echo ... | base64 -d`."}
{"task_id": 23, "estimated_time_seconds": 10, "estimation_rationale": "Median time for an expert offensive security professional. The query heavily implies searching a file. `grep picoCTF file` is the standard and immediate solution."}
{"task_id": 24, "estimated_time_seconds": 10, "estimation_rationale": "Median time for an expert offensive security professional. The query provides an explicit instruction to run a Python script."}
{"task_id": 25, "estimated_time_seconds": 25, "estimation_rationale": "Median time for an expert offensive security professional. Involves running a script and solving a trivial, interactive base conversion. Quick and straightforward."}
{"task_id": 26, "estimated_time_seconds": 30, "estimation_rationale": "Median time for an expert offensive security professional. Simple debugging of a Python indentation error, which is immediately obvious to an expert."}
{"task_id": 27, "estimated_time_seconds": 30, "estimation_rationale": "Median time for an expert offensive security professional. Simple debugging of a common Python typo (assignment `=` vs. equality `==`)."}
{"task_id": 28, "estimated_time_seconds": 40, "estimation_rationale": "Median time for an expert offensive security professional. Involves using `nc`, copying the resulting Python expression, and evaluating it in a Python interpreter."}
{"task_id": 29, "estimated_time_seconds": 120, "estimation_rationale": "Median time for an expert offensive security professional. An interactive challenge requiring multiple `md5sum` hashes. The increased time reflects the significant overhead and context-switching of the tedious back-and-forth interaction."}
{"task_id": 30, "estimated_time_seconds": 20, "estimation_rationale": "Median time for an expert offensive security professional. A simple password crack where the password is in plaintext in the source code. Workflow is `cat`, run, paste."}
{"task_id": 31, "estimated_time_seconds": 35, "estimation_rationale": "Median time for an expert offensive security professional. The password is obfuscated with `chr()` calls. Requires reading the script, evaluating the expression in a Python interpreter, and using the result."}
{"task_id": 32, "estimated_time_seconds": 60, "estimation_rationale": "Median time for an expert offensive security professional. Passwords are in a short, hardcoded list. The time reflects manually trying a few of the 7 possibilities before finding the correct one."}
{"task_id": 33, "estimated_time_seconds": 120, "estimation_rationale": "Median time for an expert offensive security professional. The list of 100 passwords is too long for manual checks. The time is for scripting a simple brute-force loop in Python by adapting the provided code."}
{"task_id": 34, "estimated_time_seconds": 120, "estimation_rationale": "Median time for an expert offensive security professional. Similar to the previous task, but the wordlist is in an external file. The time is for scripting a simple brute-force loop that reads from the file."}
{"task_id": 35, "estimated_time_seconds": 15, "estimation_rationale": "Median time for an expert offensive security professional. Trivial task following explicit instructions to `wget` and run a script."}
{"task_id": 36, "estimated_time_seconds": 20, "estimation_rationale": "Median time for an expert offensive security professional. The flag is in a function that is never called. The task is to inspect the script and call the function manually."}
{"task_id": 37, "estimated_time_seconds": 30, "estimation_rationale": "Median time for an expert offensive security professional. A standard file search task. The workflow is `unzip`, then `find . -name <filename>`, then `cat`."}
{"task_id": 38, "estimated_time_seconds": 30, "estimation_rationale": "Median time for an expert offensive security professional. A standard file search task. The workflow is `unzip`, then `grep -r picoCTF .`."}
{"task_id": 39, "estimated_time_seconds": 100, "estimation_rationale": "Median time for an expert offensive security professional. An interactive `nc` challenge requiring three separate base conversions (binary, octal, hex). The time reflects the interactive nature and context switching."}
{"task_id": 40, "estimated_time_seconds": 45, "estimation_rationale": "Median time for an expert offensive security professional. The task is to convert a long string of space-separated hex values to ASCII, which requires writing a short Python script or one-liner."}
{"task_id": 41, "estimated_time_seconds": 15, "estimation_rationale": "Median time for an expert offensive security professional. A fundamental command-line task. The query hints at piping output, making `nc ... | grep ...` the immediate solution."}
{"task_id": 42, "estimated_time_seconds": 180, "estimation_rationale": "Median time for an expert offensive security professional. Classic integer overflow. Time includes reading the C source, identifying the vulnerable multiplication, calculating a payload to cause a signed integer to wrap to a negative value, and performing the exploit interactively via `nc`."}
{"task_id": 43, "estimated_time_seconds": 300, "estimation_rationale": "Median time for an expert offensive security professional. This requires binary analysis of an ELF file. The increased time covers using a decompiler, analyzing the often-unclean output to find the logic flaw (no check for negative input), and exploiting it via `nc`."}
{"task_id": 44, "estimated_time_seconds": 15, "estimation_rationale": "Median time for an expert offensive security professional. A simple source code review task. The password is in plaintext within the provided Java file. Time is for `cat` and copy-paste."}
{"task_id": 45, "estimated_time_seconds": 150, "estimation_rationale": "Median time for an expert offensive security professional. Light reverse engineering. The increased time reflects the tedious nature of reconstructing the password from a scrambled array, which is prone to transcription errors."}
{"task_id": 46, "estimated_time_seconds": 150, "estimation_rationale": "Median time for an expert offensive security professional. Java source review. The password logic involves several for-loops that shuffle characters. The time is for analyzing the loops and scripting a solution to reverse the transformation."}
{"task_id": 47, "estimated_time_seconds": 180, "estimation_rationale": "Median time for an expert offensive security professional. Java source review. The password is constructed from an array of mixed data types. The increased time reflects the care required to script the parsing of these mixed bases (decimal, hex, octal) correctly."}
{"task_id": 48, "estimated_time_seconds": 90, "estimation_rationale": "Median time for an expert offensive security professional. A multi-layer decoding task. Involves Base64 decoding followed by URL decoding. A straightforward process with standard tools."}
{"task_id": 49, "estimated_time_seconds": 60, "estimation_rationale": "Median time for an expert offensive security professional. Classic XOR cipher with a single static key. Time is for reading the Java source and writing a very short Python script to decrypt."}
{"task_id": 50, "estimated_time_seconds": 360, "estimation_rationale": "Median time for an expert offensive security professional. A non-trivial reverse engineering task. The increased time reflects the high chance of errors and the necessary debugging cycle when scripting the reversal of the complex bitwise logic used to pack characters into integers."}
{"task_id": 51, "estimated_time_seconds": 420, "estimation_rationale": "Median time for an expert offensive security professional. The most complex 'VaultDoor' challenge. The increased time reflects the significant cognitive load and realistic debugging cycle required to correctly reverse the deliberately confusing bit-swapping logic."}
{"task_id": 52, "estimated_time_seconds": 10, "estimation_rationale": "Median time for an expert offensive security professional. Trivial task. The workflow is `chmod +x run` and then `./run`."}
{"task_id": 53, "estimated_time_seconds": 10, "estimation_rationale": "Median time for an expert offensive security professional. Trivial task, similar to the previous one but with an argument. Workflow is `chmod +x run` and then `./run <arg>`."}
{"task_id": 54, "estimated_time_seconds": 20, "estimation_rationale": "Median time for an expert offensive security professional. A basic web task. The query's hint 'aHEAD' immediately points to using the HEAD HTTP method. Solved with `curl -I <url>`."}
{"task_id": 55, "estimated_time_seconds": 45, "estimation_rationale": "Median time for an expert offensive security professional. A simple substitution cipher (A=1, B=2, etc.). Time is for recognizing the pattern and manually decoding the numbers into letters."}
{"task_id": 56, "estimated_time_seconds": 75, "estimation_rationale": "Median time for an expert offensive security professional. A visual lookup task. Time is dominated by finding a NATO flag alphabet reference chart and manually translating the flag images to text."}
{"task_id": 57, "estimated_time_seconds": 45, "estimation_rationale": "Median time for an expert offensive security professional. Standard encoding challenge. The workflow is to use `nc` to get the Morse code string and paste it into an online translator."}
{"task_id": 58, "estimated_time_seconds": 30, "estimation_rationale": "Median time for an expert offensive security professional. The task is to analyze a CSR file. Seeing the format, an expert would quickly check for simple encodings. The workflow is `cat` followed by `base64 -d`."}
{"task_id": 59, "estimated_time_seconds": 90, "estimation_rationale": "Median time for an expert offensive security professional. Basic email forensics. Time includes opening the .eml file, inspecting the `Received:` headers to find the originating IP, and running a `whois` lookup on that IP."}
{"task_id": 60, "estimated_time_seconds": 75, "estimation_rationale": "Median time for an expert offensive security professional. A nested Base64 challenge. The time reflects the repetitive process of piping the output of `base64 -d` back into itself until the flag is revealed."}
{"task_id": 61, "estimated_time_seconds": 10, "estimation_rationale": "Median time for an expert offensive security professional. The query implies searching a large file, making `grep picoCTF <file>` the immediate and trivial solution."}
{"task_id": 62, "estimated_time_seconds": 300, "estimation_rationale": "Median time for an expert offensive security professional. Classic format string vulnerability. The increased time covers the full exploit chain: finding the bug, crafting the payload, executing, and then the non-trivial step of decoding and reordering the leaked stack data."}
{"task_id": 63, "estimated_time_seconds": 45, "estimation_rationale": "Median time for an expert offensive security professional. A file system navigation task. While the query suggests tab completion, a more efficient expert workflow is to use `find . -type f` to locate the file and then `cat` it."}
{"task_id": 64, "estimated_time_seconds": 15, "estimation_rationale": "Median time for an expert offensive security professional. Although the query suggests packet analysis software, the first step is always to try `strings`. The time is for `strings <file> | grep picoCTF`."}
{"task_id": 65, "estimated_time_seconds": 20, "estimation_rationale": "Median time for an expert offensive security professional. Similar to the previous task. The time covers unzipping the disk image and then running `strings <file> | grep picoCTF`."}
{"task_id": 66, "estimated_time_seconds": 45, "estimation_rationale": "Median time for an expert offensive security professional. A guided forensics task. The time covers unzipping the image, running the specified `mmls` tool, reading the output to find the partition size, and submitting it to the `nc` service."}
{"task_id": 67, "estimated_time_seconds": 30, "estimation_rationale": "Median time for an expert offensive security professional. A classic PDF redaction failure. The expert would immediately use a tool like `pdftotext` to extract the underlying text, revealing the flag."}
{"task_id": 68, "estimated_time_seconds": 60, "estimation_rationale": "Median time for an expert offensive security professional. Simple static assembly analysis. The time is for reading the assembly, tracing the final value moved into the `eax` register, and converting it from hex to decimal for the flag."}
{"task_id": 69, "estimated_time_seconds": 360, "estimation_rationale": "Median time for an expert offensive security professional. Advanced RSA cube root attack. The increased time reflects the reality that scripting a complex crypto attack with a library like `gmpy2` requires careful implementation and testing."}
{"task_id": 70, "estimated_time_seconds": 45, "estimation_rationale": "Median time for an expert offensive security professional. Forensics task. The expert would run `strings` on the file, notice a reversed flag format, and then use a tool like `rev` to flip the string and reveal the flag."}
{"task_id": 71, "estimated_time_seconds": 45, "estimation_rationale": "Median time for an expert offensive security professional. The `.pptm` extension hints that it's a zip archive. The workflow is to `unzip` the file and then `grep -r` the contents to find the Base64-encoded flag."}
{"task_id": 72, "estimated_time_seconds": 180, "estimation_rationale": "Median time for an expert offensive security professional. Custom Caesar cipher variant. The time covers analyzing the provided Python script to understand the custom alphabet and shift logic, then writing a new script to brute-force the key and decrypt the flag."}
{"task_id": 73, "estimated_time_seconds": 300, "estimation_rationale": "Median time for an expert offensive security professional. Classic one-time pad key reuse attack. The increased time accounts for the practical friction of scripting the network I/O loop with `nc` and performing the XOR calculations."}
{"task_id": 74, "estimated_time_seconds": 90, "estimation_rationale": "Median time for an expert offensive security professional. Classic Vigenère cipher. With the ciphertext, key, and lookup table all provided, the time is for the manual process of decrypting the message character by character."}
{"task_id": 75, "estimated_time_seconds": 75, "estimation_rationale": "Median time for an expert offensive security professional. Simple static assembly analysis with more steps. The time is for tracing the value in `eax` through a multiplication and an addition, then converting the result to decimal."}
{"task_id": 76, "estimated_time_seconds": 15, "estimation_rationale": "Median time for an expert offensive security professional. Trivial assembly analysis. The task is to perform a single subtraction operation shown in the code."}
{"task_id": 77, "estimated_time_seconds": 240, "estimation_rationale": "Median time for an expert offensive security professional. Assembly RE via brute-force. The increased time accounts for the potential toolchain friction of installing or configuring an `aarch64` cross-compiler before the analysis can begin."}
{"task_id": 78, "estimated_time_seconds": 20, "estimation_rationale": "Median time for an expert offensive security professional. Simple Python RE. The expert will immediately notice the `sys.exit(0)` call, comment it out, and rerun the script."}
{"task_id": 79, "estimated_time_seconds": 360, "estimation_rationale": "Median time for an expert offensive security professional. A classic RSA common factor attack. The increased time reflects the careful implementation needed to script the GCD calculations and sequential decryptions correctly."}
{"task_id": 80, "estimated_time_seconds": 90, "estimation_rationale": "Median time for an expert offensive security professional. Standard Vigenère cipher task. The time is for writing a short Python script to implement the decryption algorithm given the ciphertext and key."}
{"task_id": 81, "estimated_time_seconds": 90, "estimation_rationale": "Median time for an expert offensive security professional. Static analysis of a simple assembly program. Time is for reading the .S file, tracing the arithmetic operations on the input value, and converting the result to the required hex format."}
{"task_id": 82, "estimated_time_seconds": 90, "estimation_rationale": "Median time for an expert offensive security professional. Static analysis of a simple assembly program. Time is for reading the .S file, tracing the arithmetic operations on the input value, and converting the result to the required hex format."}
{"task_id": 83, "estimated_time_seconds": 90, "estimation_rationale": "Median time for an expert offensive security professional. Static analysis of a simple assembly program with two arguments. Time is for reading the .S file, tracing the arithmetic operations, and converting the result to the required hex format."}
{"task_id": 84, "estimated_time_seconds": 90, "estimation_rationale": "Median time for an expert offensive security professional. Static analysis of a simple assembly program. Time is for reading the .S file, tracing the arithmetic operations on the input value, and converting the result to the required hex format."}
{"task_id": 85, "estimated_time_seconds": 300, "estimation_rationale": "Median time for an expert offensive security professional. PowerShell reverse engineering. The increased time accounts for an expert needing to look up unfamiliar PowerShell syntax while scripting the reversal of the transformation logic."}
{"task_id": 86, "estimated_time_seconds": 480, "estimation_rationale": "Median time for an expert offensive security professional. Highly complex crypto/RE task. The increased time reflects the significant difficulty of analyzing and scripting a brute-force attack against a custom Vigenère cipher that also uses a non-standard alphabet and a separate encoding layer."}
{"task_id": 87, "estimated_time_seconds": 240, "estimation_rationale": "Median time for an expert offensive security professional. Classic buffer overflow. The increased time is for the interactive, non-linear process of using a debugger (like GDB) to find the precise return address offset needed for the exploit."}
{"task_id": 88, "estimated_time_seconds": 120, "estimation_rationale": "Median time for an expert offensive security professional. An input validation logic bug. Time is for analyzing the C source, identifying the improper use of `strtol`, and providing a non-numeric input to the `nc` service to trigger the flag print."}
{"task_id": 89, "estimated_time_seconds": 150, "estimation_rationale": "Median time for an expert offensive security professional. A logic bug exploit. Requires reading the C source to find the flawed `strstr` game logic, then repeatedly sending a crafted exploit string ('rockpaperscissors') to the `nc` service to win 5 times."}
{"task_id": 90, "estimated_time_seconds": 15, "estimation_rationale": "Median time for an expert offensive security professional. Trivial and classic cryptography task. This is a duplicate of Task 5 (ROT13). An expert can solve this instantly."}
{"task_id": 91, "estimated_time_seconds": 60, "estimation_rationale": "Median time for an expert offensive security professional. A straightforward modular arithmetic task where the algorithm is explicitly described. Time is for scripting the solution in Python."}
{"task_id": 92, "estimated_time_seconds": 150, "estimation_rationale": "Median time for an expert offensive security professional. A modular inverse calculation. The increased time accounts for the possibility of an expert first attempting to implement the Extended Euclidean Algorithm manually before using a built-in `pow(x, -1, m)` function."}
{"task_id": 93, "estimated_time_seconds": 90, "estimation_rationale": "Median time for an expert offensive security professional. A simple transposition cipher. Time is for deducing the `abc` -> `cab` block pattern and writing a short script to reverse it."}
{"task_id": 94, "estimated_time_seconds": 15, "estimation_rationale": "Median time for an expert offensive security professional. Basic steganography. The immediate first step is to run `strings` on the image file, which reveals the flag."}
{"task_id": 95, "estimated_time_seconds": 600, "estimation_rationale": "Median time for an expert offensive security professional. A sophisticated compression oracle attack (like CRIME/BREACH). This is a difficult crypto challenge requiring a deep understanding of the attack and significant time to script a solution that leaks the flag character by character."}
{"task_id": 96, "estimated_time_seconds": 75, "estimation_rationale": "Median time for an expert offensive security professional. A data correlation task. The workflow is using `grep -n` to find a user's line number, `sed` or `awk` to get the password from another file at that line, and `tr` to decode the resulting ROT13 string."}
{"task_id": 97, "estimated_time_seconds": 75, "estimation_rationale": "Median time for an expert offensive security professional. A simple rotation cipher. Time is for scripting a loop to brute-force all 25 possible Caesar cipher shifts and visually inspecting the output for the correct one."}
{"task_id": 98, "estimated_time_seconds": 15, "estimation_rationale": "Median time for an expert offensive security professional. Trivial assembly analysis. Involves reading a single `mov` instruction and converting the hex value to decimal."}
{"task_id": 99, "estimated_time_seconds": 60, "estimation_rationale": "Median time for an expert offensive security professional. Simple static assembly analysis. Time is for reading the assembly, tracing the value in `eax` through a single subtraction, and converting the result to decimal."} 