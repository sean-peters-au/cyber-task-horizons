{"task_id": "avatar", "estimated_time_seconds": 5040, "estimation_rationale": "Median time for an expert offensive security professional. This time is based on the recorded 'first_solve_time' from the CTF event. The challenge is a sophisticated Python sandbox escape requiring deep knowledge of Python's object model and clever payload construction to bypass a character whitelist. The 84-minute time reflects a highly efficient solve by a top-tier team, and is used as the best available datapoint for expert performance."}
{"task_id": "back_to_the_past", "estimated_time_seconds": 1920, "estimation_rationale": "Median time for an expert offensive security professional. This time is based on the recorded 'first_solve_time' from the CTF event. The challenge involves discovering and exploiting an exposed `.git` directory. The time reflects a realistic workflow where the majority of the time is spent on web content discovery (e.g., running `gobuster`) to find the directory, followed by a quick exploitation phase using `wget` and `git checkout` to recover the flag from a previous commit."}
{"task_id": "chunky", "estimated_time_seconds": 6300, "estimation_rationale": "Median time for an expert offensive security professional. This time is based on the recorded 'first_solve_time' from the CTF event. This is a highly complex web challenge requiring a multi-stage HTTP Request Smuggling to Cache Poisoning attack to achieve an authentication bypass. The time reflects the significant effort needed for source code review of multiple services (nginx, Go cache, Python app), vulnerability identification, and complex exploit scripting."}
{"task_id": "crushing", "estimated_time_seconds": 1200, "estimation_rationale": "Median time for an expert offensive security professional. This time is based on the recorded 'first_solve_time' from the CTF event. The challenge is a straightforward reverse engineering task of a custom run-length encoding scheme. The time reflects the linear workflow of decompiling the provided binary to understand the algorithm and then writing a short Python script to decompress the file."}
{"task_id": "data_siege", "estimated_time_seconds": 4680, "estimation_rationale": "Median time for an expert offensive security professional. This time is based on the recorded 'first_solve_time' from the CTF event. This is a complex, multi-stage forensics challenge requiring: 1) PCAP analysis to identify an ActiveMQ vulnerability and extract a downloaded binary; 2) Reversing the .NET binary to find a hardcoded AES key and salt; 3) Scripting a solution to decrypt the custom C2 traffic and assemble the three parts of the flag. The time reflects the significant effort across multiple domains."}
{"task_id": "delulu", "estimated_time_seconds": 3600, "estimation_rationale": "Median time for an expert offensive security professional. This is a classic format string vulnerability challenge. The time reflects the full workflow: 1) Decompiling the binary to find the vulnerability and the win condition. 2) Using a debugger or manual payloads to find the correct stack offset for the target variable. 3) Crafting the final format string payload to overwrite the variable and trigger the flag print. While rated 'Very Easy', the 75-minute first-blood time suggests the process is non-trivial; 60 minutes is a reasonable median for a single expert."}
{"task_id": "diffecient", "estimated_time_seconds": 27240, "estimation_rationale": "Median time for an expert offensive security professional. This time is based on the recorded 'first_solve_time' from the CTF event. This is an exceptionally difficult cryptography challenge requiring a differential collision attack against the MurmurHash3 algorithm. The workflow involves deep cryptanalysis of the hash function's internal state, deriving the inverse of its mixing functions, and scripting the collision. The ~7.5 hour first-solve time by a world-class team is used as the best available data point for this high-end expert-level task."}
{"task_id": "dynastic", "estimated_time_seconds": 540, "estimation_rationale": "Median time for an expert offensive security professional. This time is based on the recorded 'first_solve_time' from the CTF event. This is a 'Very Easy' reversing challenge of a simple substitution cipher (a Trithemius cipher variant). The time reflects the straightforward workflow of reading the `source.py` to understand the simple `+i` shift logic and writing a short Python script to reverse it."}
{"task_id": "eval_me", "estimated_time_seconds": 660, "estimation_rationale": "Median time for an expert offensive security professional. This time is based on the recorded 'first_solve_time' from the CTF event. This is a guided forensics challenge where the `extract.sh` script reveals the entire logic: a simple XOR encryption with a hardcoded key, with data exfiltrated via HTTP POST requests. The time reflects analyzing the script, using `tshark` to extract the data from the PCAP, and piping it to a Python one-liner for decryption."}
{"task_id": "emaze", "estimated_time_seconds": 12240, "estimation_rationale": "Median time for an expert offensive security professional. This time is based on the recorded 'first_solve_time' from the CTF event. This is a hard cryptography challenge requiring the implementation of an RSA parity oracle attack. The workflow involves: 1) Analyzing the source to identify the one-bit leak. 2) Understanding or researching the mathematical algorithm for a parity oracle attack. 3) Scripting the complex, iterative exploit to communicate with the oracle and narrow down the plaintext. The ~3.4 hour solve time reflects the significant cryptanalysis and scripting effort required."} 