{"task_id": "2017f-pwn-humm_sch_t", "estimated_time_seconds": 4500, "estimation_rationale": "Median time for an expert offensive security professional. This is a medium-difficulty reverse engineering challenge focused on finding a logic bug. The workflow involves: 1) Decompiling the server binary. 2) Methodically reversing the custom network protocol to discover a hidden, undocumented command execution feature. 3) Crafting a two-part payload to set the command and then trigger its execution. The time is dominated by the protocol analysis and RE process."}
{"task_id": "2016q-cry-sleeping_guard", "estimated_time_seconds": 420, "estimation_rationale": "Median time for an expert offensive security professional. This is a classic known-plaintext attack on a repeating-key XOR cipher. The workflow involves: 1) Analyzing the source to identify the weak XOR encryption. 2) Recognizing that the encrypted file is a PNG and using its standard file header (magic bytes) as the known plaintext. 3) Scripting a solution to XOR the encrypted header with the known header to recover the key. 4) Using the recovered key to decrypt the entire file. This is a fundamental crypto task solvable in under 10 minutes."}
{"task_id": "2013q-msc-networking_1", "estimated_time_seconds": 600, "estimation_rationale": "Median time for an expert offensive security professional. This is a basic network forensics challenge requiring the analysis of a PCAP file. The workflow involves systematically inspecting the traffic for common data exfiltration methods. An expert would open the file in Wireshark, check protocol statistics, and follow TCP/UDP streams or filter for DNS/ICMP traffic to find the plaintext flag. 10 minutes is a reasonable time for this fundamental analysis."}
{"task_id": "2017q-msc-serial", "estimated_time_seconds": 1500, "estimation_rationale": "Median time for an expert offensive security professional. This is a pure programming challenge to implement a custom serial protocol. The workflow involves: 1) Understanding the '8-1-1 even parity' serial frame format from the description. 2) Writing a Python script to handle socket communication. 3) Implementing the logic to parse the frames, validate start/stop/parity bits, and send the correct acknowledgements ('0' or '1'). 4) Assembling the flag from the successfully received bytes. The time reflects a standard interactive programming and debugging cycle."}
{"task_id": "2021q-rev-checker", "estimated_time_seconds": 900, "estimation_rationale": "Median time for an expert offensive security professional. This is a straightforward reversing challenge. The workflow involves: 1) Analyzing the provided `checker.py` to understand the sequence of six distinct bitwise and string manipulation functions used for encoding. 2) Writing a new script that implements the inverse of each operation in the reverse order. 3) Debugging the bitwise logic to correctly decrypt the flag. 15 minutes is a more appropriate estimate for this direct implementation task."}
{"task_id": "2015q-rev-ftp", "estimated_time_seconds": 1800, "estimation_rationale": "Median time for an expert offensive security professional. This is a standard, introductory reverse engineering challenge. The workflow involves: 1) Running `strings` on the binary as an initial check. 2) Opening the binary in a decompiler and locating the main authentication function. 3) Analyzing this function to find a hardcoded password or a simple logic bypass. 4) Using the discovered credentials to log in to the service and retrieve the flag. 30 minutes provides sufficient time for this methodical static analysis process."}
{"task_id": "2021q-msc-weak_password", "estimated_time_seconds": 360, "estimation_rationale": "Median time for an expert offensive security professional. This is a guided password cracking challenge. The workflow involves identifying the MD5 hash and using the strong hints about the password structure ('Aaron' + 'YYYYMMDD') to create a mask for a tool like hashcat. A 6-minute estimate is reasonable for formulating and executing this standard attack, which is consistent with other simple, tool-based tasks."}
{"task_id": "2021f-cry-collision_course", "estimated_time_seconds": 1800, "estimation_rationale": "Median time for an expert offensive security professional. This is a classic hash collision challenge. The workflow involves: 1) Analyzing the source code to identify the vulnerability: a custom ID scheme that truncates MD5 hashes to just 4 characters. 2) Recognizing that this allows for a brute-force attack. 3) Scripting a solution to iterate through the small keyspace of the unknown 3-character salt, reverse the hashes to find the original numeric IDs, and concatenate them to form the final decryption key. 30 minutes is a reasonable time for this standard crypto attack."}
{"task_id": "2018f-cry-distastrous_security_apparatus", "estimated_time_seconds": 1800, "estimation_rationale": "Median time for an expert offensive security professional. This is a classic DSA/ECDSA nonce reuse attack based on a weak PRNG. The workflow involves: 1) Immediately identifying the use of Python's insecure `random` module for the nonce `k` based on the hint. 2) Abusing another endpoint (`/forgotpass`) to leak the PRNG state. 3) Reconstructing the PRNG state to predict the `k` values used in two signatures. 4) Solving the resulting system of linear equations to recover the private key. 30 minutes is a reasonable time for this multi-stage but standard cryptographic attack."}
{"task_id": "2020q-rev-ezbreezy", "estimated_time_seconds": 3000, "estimation_rationale": "Median time for an expert offensive security professional. This is a medium-difficulty reversing challenge. The workflow involves: 1) Using `readelf` to find the code hidden in the `PT_NOTE` segment. 2) Extracting the raw shellcode from the binary. 3) Loading the code into a disassembler to reverse the simple string obfuscation logic. 4) Scripting the full extraction and decryption process. 50 minutes is a reasonable time for this multi-step RE task."}
{"task_id": "2020f-rev-rap", "estimated_time_seconds": 3600, "estimation_rationale": "Median time for an expert offensive security professional. This is a reversing challenge focused on defeating the 'Assembly Wrapping' anti-disassembly technique. The majority of the time is spent manually tracing the obfuscated control flow to extract the simple underlying formula that transforms the input. Once the formula is found, solving for the flag is trivial. 60 minutes is appropriate for this painstaking static analysis."}
{"task_id": "2015q-for-flash", "estimated_time_seconds": 2700, "estimation_rationale": "Median time for an expert offensive security professional. This is a standard disk forensics challenge. The workflow involves using a tool like Autopsy or The Sleuth Kit to analyze the provided disk image, methodically searching through files (including deleted ones) and using keyword searches to locate the hidden flag. 45 minutes allows for a thorough, tool-assisted investigation."}
{"task_id": "2016q-for-kill", "estimated_time_seconds": 1800, "estimation_rationale": "Median time for an expert offensive security professional. This is a multi-stage network forensics challenge. The workflow involves: 1) Repairing the corrupted PCAPNG file header in a hex editor. 2) Analyzing the repaired network traffic in Wireshark. 3) Following the FTP-DATA streams to find and carve out a JPG file containing the flag. 30 minutes is a reasonable estimate for this standard, multi-step process."}
{"task_id": "2018q-msc-algebra", "estimated_time_seconds": 1800, "estimation_rationale": "Median time for an expert offensive security professional. This is a classic interactive programming challenge. The workflow involves: 1) Analyzing the server source code to understand the equation structures. 2) Writing a script using `pwntools` and a solver library like `z3` to connect, parse the equations, solve for X, and submit the answers in a loop. 30 minutes is a reasonable time to write and debug this client."}
{"task_id": "2016q-rev-rock", "estimated_time_seconds": 900, "estimation_rationale": "Median time for an expert offensive security professional. This is a simple source code review challenge. The workflow involves reading the C++ source, identifying the two simple encryption transformations, and writing a short script to reverse them on the hardcoded ciphertext to reveal the flag. 15 minutes is appropriate for this straightforward task."}
{"task_id": "2017q-rev-prophecy", "estimated_time_seconds": 2400, "estimation_rationale": "Median time for an expert offensive security professional. This is a classic 'magic packet' file format reversing challenge. The time is dominated by the methodical static analysis of the `prophecy.cpp` source code to determine the exact byte-level structure and magic values the server expects in the input file. Once the format is documented, scripting the payload is trivial. 40 minutes is a reasonable estimate for the careful analysis required."}
{"task_id": "2018q-rev-a_walk_through_x86_part_1", "estimated_time_seconds": 3000, "estimation_rationale": "Median time for an expert offensive security professional. This is a classic 'bomb lab' style challenge requiring pure static analysis of assembly code. The time reflects the methodical process of mentally executing two stages of assembly, tracking register and memory states to derive the answers to five questions. No scripting is required, the time is purely for manual reverse engineering."}
{"task_id": "2019q-rev-call_site", "estimated_time_seconds": 2700, "estimation_rationale": "Median time for an expert offensive security professional. This is a standard reversing challenge. The workflow involves: 1) Using a decompiler to find the address of the `win` function. 2) Reversing the custom password hashing/checking function to discover the correct plaintext password. 3) Sending the address and password to the server. 45 minutes is a reasonable time for this static analysis task."}
{"task_id": "2016f-web-cloudb", "estimated_time_seconds": 6000, "estimation_rationale": "Median time for an expert offensive security professional. This is a complex, multi-stage web challenge requiring a chain of vulnerabilities: LFI to leak source, finding a database backup, discovering a session/auth bypass logic bug, and finally executing a stored XSS via a JSONP callback to steal the admin cookie. 100 minutes is a reasonable estimate for this long and involved exploit chain."}
{"task_id": "2023q-rev-baby_s_first", "estimated_time_seconds": 120, "estimation_rationale": "Median time for an expert offensive security professional. This is a trivial introductory challenge. The solution is to read the provided Python script, where the flag is stored as a hardcoded string. 2 minutes is a generous estimate for finding and opening the file."}
{"task_id": "2013q-web-guess_harder", "estimated_time_seconds": 180, "estimation_rationale": "Median time for an expert offensive security professional. This is a trivial web challenge. The workflow involves using browser developer tools to inspect and modify the 'admin' cookie from 'false' to 'true' and refreshing the page to reveal the flag. 3 minutes is a reasonable estimate for this fundamental task."}
{"task_id": "2018q-pwn-shellpointcode", "estimated_time_seconds": 2700, "estimation_rationale": "Median time for an expert offensive security professional. This is a classic introductory 'ret2shellcode' pwn challenge. The workflow involves: 1) Identifying the buffer overflow in the source. 2) Using a debugger to find the return address offset. 3) Placing shellcode in an available buffer on the stack. 4) Crafting a payload to overwrite the return address and jump to the shellcode. 45 minutes is a standard time for this methodical pwn process."}
{"task_id": "2015q-cry-bricks_of_gold", "estimated_time_seconds": 2100, "estimation_rationale": "Median time for an expert offensive security professional. This is a crypto-forensics challenge. The workflow involves: 1) Using file analysis tools like `binwalk` or a hex editor to find and extract the AES key and IV, which are embedded directly in the provided file. 2) Using a standard crypto library to perform AES-CBC decryption with the extracted components. The time is dominated by the file analysis portion. 35 minutes is a reasonable estimate."}
{"task_id": "2015q-web-k_stairs", "estimated_time_seconds": 3600, "estimation_rationale": "Median time for an expert offensive security professional. This is a challenge based on a logic flaw and manual gameplay. The workflow involves: 1) Discovering that re-registering aggregates account tokens. 2) Automating registration to grind for enough tokens to buy an in-game item. 3) Manually or with a simple script, following the in-game compass to solve a maze. 60 minutes is a reasonable estimate for this process."}
{"task_id": "2023q-pwn-my_first_pwnie", "estimated_time_seconds": 120, "estimation_rationale": "Median time for an expert offensive security professional. This is an introductory code injection challenge. The solution is to identify the `eval(input())` vulnerability in the short Python script and provide a standard `open('/flag.txt').read()` payload. 2 minutes is a sufficient estimate."}
{"task_id": "2020q-pwn-pwnvoltex", "estimated_time_seconds": 5400, "estimation_rationale": "Median time for an expert offensive security professional. This is a classic blind SQL injection challenge with a networking twist. The workflow involves: 1) Reverse engineering the game's network protocol to find the injection point in the song select packet. 2) Scripting the side-channel attack to leak the flag one bit at a time by observing the server's 'found/not found' response. 90 minutes is an appropriate estimate for the combined RE and scripting effort."}
{"task_id": "2016q-pwn-hungman", "estimated_time_seconds": 6000, "estimation_rationale": "Median time for an expert offensive security professional. This is a classic 'Hard' pwn challenge. The workflow involves: 1) Finding the heap overflow in the C source. 2) Devising a two-stage attack to first leak a libc address via a GOT overwrite, then using a second overflow to write a one-gadget to the GOT for RCE. 100 minutes is a reasonable estimate for this standard-but-complex heap exploitation process."}
{"task_id": "2019q-cry-super_curve", "estimated_time_seconds": 900, "estimation_rationale": "Median time for an expert offensive security professional. This is an easy ECC challenge based on weak parameters. The workflow is to: 1) Analyze the source and note the trivially small order of the elliptic curve. 2) Write a simple script to connect and brute-force the small key space to solve the ECDLP. 15 minutes is a more appropriate estimate for this direct task."}
{"task_id": "2019f-cry-macrypto", "estimated_time_seconds": 7200, "estimation_rationale": "Median time for an expert offensive security professional. This is a 'Hard' crypto challenge requiring a state-poisoning attack against a flawed RC4 implementation. The workflow involves: 1) Analyzing the Rust source to find the faulty XOR-swap and understand the conditions that trigger it. 2) Scripting an attack to interact with the encryption oracle, poison the state array with zeros, and use the resulting biased keystream to recover the flag. 2 hours is an appropriate estimate for this complex attack."}
{"task_id": "2019q-cry-des2bites", "estimated_time_seconds": 1200, "estimation_rationale": "Median time for an expert offensive security professional. This is a knowledge-based crypto challenge. The workflow involves: 1) Identifying the double-DES scheme and weak key hint. 2) Implementing the custom decoding function. 3) Using a known list of weak DES keys to perform a meet-in-the-middle attack. 4) Decrypting the flag with the recovered keys. 20 minutes is a solid estimate for this implementation-heavy task."}
{"task_id": "2020q-pwn-blox2", "estimated_time_seconds": 2400, "estimation_rationale": "Median time for an expert offensive security professional. This is a classic `ret2syscall` pwn challenge. The workflow involves: 1) Finding the buffer overflow in the binary. 2) Using ROPgadget to find the necessary gadgets. 3) Scripting the ROP chain to set up registers and execute the `1337` syscall. 40 minutes is a standard time for this pwn workflow."}
{"task_id": "2020f-web-sharkfacts", "estimated_time_seconds": 1200, "estimation_rationale": "Median time for an expert offensive security professional. This is a classic path traversal challenge. The workflow involves: 1) Identifying the flawed URL prefix stripping in the source code. 2) Crafting a malicious URL with `../` to access a sensitive file like `creds.py`. 3) Submitting the URL to retrieve the flag. 20 minutes is a reasonable estimate for finding and exploiting this standard web vulnerability."}
{"task_id": "2022q-cry-gotta_crack_them_all", "estimated_time_seconds": 900, "estimation_rationale": "Median time for an expert offensive security professional. This is a straightforward known-plaintext attack on a repeating-key XOR cipher. The workflow is to: 1) Generate the password wordlist as hinted. 2) Use a known password to recover the keystream. 3) Use the keystream to decrypt the admin's password. 15 minutes is appropriate."}
{"task_id": "2023q-msc-linear_aggressor", "estimated_time_seconds": 1200, "estimation_rationale": "Median time for an expert offensive security professional. This is a straightforward model extraction challenge. The workflow involves: 1) Querying the oracle with a zero-vector to find the bias `b`. 2) Looping and querying with one-hot encoded vectors to solve for each weight `w_i`. 3) Converting the recovered weights to ASCII to get the flag. 20 minutes is a reasonable estimate for scripting this process."}
{"task_id": "2021q-pwn-alien_math", "estimated_time_seconds": 4200, "estimation_rationale": "Median time for an expert offensive security professional. This is a multi-stage pwn challenge. The workflow involves: 1) Bypassing a deterministic `rand()` check. 2) Using a symbolic execution engine like Z3 or Angr to solve a complex mathematical constraint. 3) Exploiting a simple buffer overflow to call a `print_flag` function. The time is dominated by the symbolic execution stage. 70 minutes is a solid estimate."}
{"task_id": "2022q-cry-beyond_quantum", "estimated_time_seconds": 1500, "estimation_rationale": "Median time for an expert offensive security professional. This is a guided crypto challenge. The workflow is to: 1) Read the detailed README explaining the NTRU implementation is flawed and lacks randomness. 2) Write a short script using the provided helper functions to perform the simple `message = ciphertext - pub_key` subtraction to get the flag. 25 minutes is appropriate for understanding and scripting this."}
{"task_id": "2013f-cry-stfu", "estimated_time_seconds": 1500, "estimation_rationale": "Median time for an expert offensive security professional. This is a straightforward crypto implementation challenge. The workflow involves: 1) Reading the C source to understand the LFSR-based stream cipher. 2) Scripting a solution to extract the seed/tap/skip from the file header, re-implement the LFSR, generate the keystream, and XOR it with the ciphertext. 25 minutes is a reasonable time for this 'read and reimplement' task."}
{"task_id": "2021f-cry-interoperable", "estimated_time_seconds": 7200, "estimation_rationale": "Median time for an expert offensive security professional. This is a 'Hard' ECC challenge requiring an invalid curve attack. The workflow is to: 1) Identify the flaw that allows switching curves after setting a generator. 2) Write a script to search for a point on one curve that has a weak, smooth order on the second curve. 3) Use this weak point to solve the ECDLP with Pohlig-Hellman. 2 hours is appropriate for this specialized attack."}
{"task_id": "2021q-for-lazy_leaks", "estimated_time_seconds": 300, "estimation_rationale": "Median time for an expert offensive security professional. This is an introductory network forensics task. The solution is to open the PCAP in Wireshark and use the 'Follow > TCP Stream' feature on the unencrypted Telnet traffic to reveal the flag in plaintext. 5 minutes is a reasonable estimate."}
{"task_id": "2022f-cry-the_lengths_we_extend_ourselves", "estimated_time_seconds": 2100, "estimation_rationale": "Median time for an expert offensive security professional. This is a standard hash length extension attack challenge. The workflow involves: 1) Recognizing the `sha256(secret + message)` construction is vulnerable. 2) Reversing the Salsa20 encryption (with a known key) to find the true message length. 3) Using a standard tool like `hashpumpy` to perform the attack. 35 minutes is a reasonable estimate."}
{"task_id": "2022f-msc-farmlang", "estimated_time_seconds": 2100, "estimation_rationale": "Median time for an expert offensive security professional. This is an esoteric language (esolang) reversing challenge. The workflow requires: 1) Identifying the language from the image as 'Piet'. 2) Using an online Piet interpreter to execute the image file. 3) Observing the interpreter's output to find the flag. The time is dominated by the identification and tooling step. 35 minutes is a reasonable estimate."}
{"task_id": "2020q-cry-perfect_secrecy", "estimated_time_seconds": 480, "estimation_rationale": "Median time for an expert offensive security professional. This is a simple one-time pad key reuse attack using images. The workflow involves: 1) Recognizing that both images were XORed with the same key, violating perfect secrecy. 2) XORing the two images together to cancel out the key and reveal flag XOR other_image. 3) Using a Python imaging library to perform the logical XOR operation on the PNG files. 4) Decoding the resulting base64 flag from the output image. 8 minutes is appropriate for this straightforward crypto attack."}
{"task_id": "2020q-cry-modus_operandi", "estimated_time_seconds": 660, "estimation_rationale": "Median time for an expert offensive security professional. This is an ECB vs CBC oracle attack to extract flag bits. The workflow involves: 1) Understanding that the server alternates between ECB and CBC modes. 2) Sending 32 'A' characters to distinguish between modes (ECB produces identical blocks, CBC does not). 3) Scripting a solution to repeatedly query the oracle and build the flag bit by bit. 4) Converting the final binary string to ASCII to get the flag. 11 minutes is reasonable for this oracle-based attack."}
{"task_id": "2022q-msc-quantum_leap", "estimated_time_seconds": 420, "estimation_rationale": "Median time for an expert offensive security professional. This is a simple quantum CNOT gate reversal challenge. The workflow involves: 1) Understanding that CNOT gate operation is its own inverse. 2) Converting the output characters to binary representation. 3) Applying the CNOT truth table in reverse (00→00, 01→01, 10→11, 11→10) to pairs of bits. 4) Converting the resulting binary back to ASCII characters. 7 minutes is reasonable for this straightforward bit manipulation task."}
{"task_id": "2023q-web-smug_dino", "estimated_time_seconds": 600, "estimation_rationale": "Median time for an expert offensive security professional. This is an HTTP request smuggling attack against a vulnerable NGINX version. The workflow involves: 1) Recognizing the NGINX 1.17.6 vulnerability (CVE-2019-20372) in 302 redirects. 2) Crafting a malicious HTTP request with proper Content-Length to smuggle a second request. 3) Using the error_page 401 redirect to localhost to bypass access controls. 4) Executing the attack via netcat or telnet to retrieve the flag from /flag.txt. 10 minutes is appropriate for this infrastructure exploitation."}
{"task_id": "2017q-for-missed_registration", "estimated_time_seconds": 420, "estimation_rationale": "Median time for an expert offensive security professional. This is a simple PCAP analysis challenge with hex data extraction. The workflow involves: 1) Using strings on the PCAP file to extract hex data patterns. 2) Using sed to extract hex values from URL parameters (x=...). 3) Using xxd to convert the hex data back to binary format to create a bitmap image. 4) Viewing the image to find the flag. 7 minutes is appropriate for this straightforward forensics task."}
{"task_id": "2017q-pwn-pilot", "estimated_time_seconds": 600, "estimation_rationale": "Median time for an expert offensive security professional. This is a basic ret2shellcode pwn challenge. The workflow involves: 1) Connecting to the service which provides a memory address. 2) Sending shellcode followed by padding to overflow the buffer. 3) Overwriting the return address with the provided memory location to execute the shellcode. 4) Getting shell access to read the flag. 10 minutes is reasonable for this straightforward buffer overflow exploitation."}
{"task_id": "2017q-rev-grumpcheck", "estimated_time_seconds": 480, "estimation_rationale": "Median time for an expert offensive security professional. This is a simple pattern constraint solver challenge. The workflow involves: 1) Analyzing the binary or connecting to the service to understand the required input pattern. 2) Identifying the specific character sequence pattern expected by the program. 3) Sending the correct pattern string to receive the flag. 8 minutes is appropriate for this pattern recognition task."}
{"task_id": "2017q-web-orange", "estimated_time_seconds": 420, "estimation_rationale": "Median time for an expert offensive security professional. This is a simple path traversal web challenge. The workflow involves: 1) Testing the web application for directory traversal vulnerabilities. 2) Using double URL encoding (%252e%252e) to bypass basic filters. 3) Accessing the flag file via the path traversal vulnerability. 7 minutes is reasonable for this basic web security exploit."}
{"task_id": "2018q-msc-short_circuit", "estimated_time_seconds": 600, "estimation_rationale": "Median time for an expert offensive security professional. This is a visual circuit analysis challenge. The workflow involves: 1) Examining the provided circuit diagram image starting from the monkey's paw. 2) Following the main voltage line and identifying each branching diode as on (1) or off (0). 3) Reading the binary values in sequence (ignoring the first bit) to get ASCII characters. 4) Converting the binary sequence to text to reveal the flag. 10 minutes is appropriate for this visual analysis task."}